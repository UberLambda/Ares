set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR})
string(TOUPPER "${CMAKE_BUILD_TYPE}" BUILD_TYPE)

# Prefer static libraries when possible
set(BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)


# == GLFW (3.x) == Upstream: https://github.com/glfw/glfw == License: zlib
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
add_subdirectory(glfw/)

# == glm == Upstream: https://github.com/g-truc/glm == License: MIT
add_library(glm INTERFACE)
target_include_directories(glm INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/glm/")

# == Boost (context) == Upstream: https://www.boost.org/ == License: Boost 1.0
#find_package(Boost REQUIRED COMPONENTS context)
#add_library(boost INTERFACE)
#target_include_directories(boost INTERFACE ${BOOST_INCLUDE_DIRS})
#target_link_libraries(boost INTERFACE ${BOOST_LIBRARIES})

# == boost_context_ftl (forked boost::context from FiberTaskingLib)
# == Upstream: https://github.com/RichieSams/FiberTaskingLib
# == License: Apache2 (see file: boost_context_ftl/LICENSE.md)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/boost_context_ftl")
add_subdirectory(boost_context_ftl/)

# == moodycamel::concurrentqueue
# == Upstream: https://github.com/cameron314/concurrentqueue
# == License: Boost 1.0
add_library(concurrentqueue INTERFACE)
target_include_directories(concurrentqueue INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/concurrentqueue/")

# == Vulkan (+ vulkan-hpp)
# == Upstream: https://www.khronos.org/vulkan/ [imported via find script]
# == License: Apache2 (see system headers)
find_package(Vulkan REQUIRED)
add_library(vulkan INTERFACE)
target_include_directories(vulkan INTERFACE ${Vulkan_INCLUDE_DIRS})
target_link_libraries(vulkan INTERFACE ${Vulkan_LIBRARIES})

# == flextgl
# == Upstream: https://github.com/mosra/flextgl/
# == License: MIT (see file: flextgl/COPYING)
# ----- NOTE -----
# flextGL is not actually present, its autogenerated code is in-tree. That code
# depends on legacy libGL (found via find script) to implement GL1.1 functions
# and GLFW3 (that is also in-tree) to load all other GL functions.
set(OpenGL_GL_PREFERENCE "LEGACY")
find_package(OpenGL 1.1 REQUIRED)

add_library(flextgl STATIC flextgl/flextGL.c)
target_include_directories(flextgl PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/flextgl/")
target_link_libraries(flextgl PUBLIC ${OPENGL_gl_LIBRARY} glfw)

# == tinyformat
# == Upstream: https://github.com/c42f/tinyformat [in-tree]
# == License: Boost 1.0
add_library(tinyformat INTERFACE)
target_include_directories(tinyformat INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/tinyformat/")

# == rpmalloc (optional)
# == Upstream: https://github.com/rampantpixels/rpmalloc [in-tree, custom build steps]
# == License: public domain
option(ARES_USE_RPMALLOC "Use rpmalloc instead of the default memory allocator" ON)
if(ARES_USE_RPMALLOC)
    set(RPMALLOC_ROOT "${CMAKE_CURRENT_SOURCE_DIR}/rpmalloc")

    add_library(rpmalloc STATIC "${RPMALLOC_ROOT}/rpmalloc/rpmalloc.c")
    target_include_directories(rpmalloc PUBLIC "${RPMALLOC_ROOT}/")
    target_compile_definitions(rpmalloc PUBLIC ENABLE_STATISTICS=1)

    if(BUILD_TYPE MATCHES DEBUG)
        # Disable rpmalloc's assertions in Release/RelWithDebInfo
        # Otherwise, NDEBUG would get #undef'd in rpmalloc.c, causing assertions
        # to trigger even in release builds!
        target_compile_definitions(rpmalloc PUBLIC ENABLE_ASSERTS=1)
    endif()
endif()

# == plthook
# == Upstream: https://github.com/kubo/plthook [in-tree, custom build steps]
# == License: BSD 2-clause
if(WIN32)
    set(PLTHOOK_SOURCE_FILE "plthook_win32.c")
    set(PLTHOOK_DEPS
        dbghelp  # for ImageDirectoryEntryToData
    )
elseif(APPLE)
    set(PLTHOOK_SOURCE_FILE "plthook_osx.c")
    set(PLTHOOK_DEPS "")
else()
    set(PLTHOOK_SOURCE_FILE "plthook_elf.c")
    set(PLTHOOK_DEPS "")
endif()

add_library(plthook STATIC "${CMAKE_CURRENT_SOURCE_DIR}/plthook/${PLTHOOK_SOURCE_FILE}")
target_include_directories(plthook PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}")
target_link_libraries(plthook PUBLIC ${PLTHOOK_DEPS})


# == tinygltf
# == Upstream: https://github.com/syoyo/tinygltf [in-tree]
# == License: MIT
add_library(tinygltf STATIC tinygltf.cc)
target_include_directories(tinygltf PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/tinygltf/")
