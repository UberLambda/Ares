#include "GLFW.hh"
// ===== AUTOGENERATED FROM #defines IN 3rdparty/glfw/include/GLFW/glfw3.h !! =====

#include <glm/geometric.hpp>

namespace Ares
{

// ===== Prehashed AxisNames =====
static constexpr const AxisName nameKeySpace{"Key.Space"};
static constexpr const AxisName nameKeyApostrophe{"Key.Apostrophe"};
static constexpr const AxisName nameKeyComma{"Key.Comma"};
static constexpr const AxisName nameKeyMinus{"Key.Minus"};
static constexpr const AxisName nameKeyPeriod{"Key.Period"};
static constexpr const AxisName nameKeySlash{"Key.Slash"};
static constexpr const AxisName nameKey0{"Key.0"};
static constexpr const AxisName nameKey1{"Key.1"};
static constexpr const AxisName nameKey2{"Key.2"};
static constexpr const AxisName nameKey3{"Key.3"};
static constexpr const AxisName nameKey4{"Key.4"};
static constexpr const AxisName nameKey5{"Key.5"};
static constexpr const AxisName nameKey6{"Key.6"};
static constexpr const AxisName nameKey7{"Key.7"};
static constexpr const AxisName nameKey8{"Key.8"};
static constexpr const AxisName nameKey9{"Key.9"};
static constexpr const AxisName nameKeySemicolon{"Key.Semicolon"};
static constexpr const AxisName nameKeyEqual{"Key.Equal"};
static constexpr const AxisName nameKeyA{"Key.A"};
static constexpr const AxisName nameKeyB{"Key.B"};
static constexpr const AxisName nameKeyC{"Key.C"};
static constexpr const AxisName nameKeyD{"Key.D"};
static constexpr const AxisName nameKeyE{"Key.E"};
static constexpr const AxisName nameKeyF{"Key.F"};
static constexpr const AxisName nameKeyG{"Key.G"};
static constexpr const AxisName nameKeyH{"Key.H"};
static constexpr const AxisName nameKeyI{"Key.I"};
static constexpr const AxisName nameKeyJ{"Key.J"};
static constexpr const AxisName nameKeyK{"Key.K"};
static constexpr const AxisName nameKeyL{"Key.L"};
static constexpr const AxisName nameKeyM{"Key.M"};
static constexpr const AxisName nameKeyN{"Key.N"};
static constexpr const AxisName nameKeyO{"Key.O"};
static constexpr const AxisName nameKeyP{"Key.P"};
static constexpr const AxisName nameKeyQ{"Key.Q"};
static constexpr const AxisName nameKeyR{"Key.R"};
static constexpr const AxisName nameKeyS{"Key.S"};
static constexpr const AxisName nameKeyT{"Key.T"};
static constexpr const AxisName nameKeyU{"Key.U"};
static constexpr const AxisName nameKeyV{"Key.V"};
static constexpr const AxisName nameKeyW{"Key.W"};
static constexpr const AxisName nameKeyX{"Key.X"};
static constexpr const AxisName nameKeyY{"Key.Y"};
static constexpr const AxisName nameKeyZ{"Key.Z"};
static constexpr const AxisName nameKeyLBracket{"Key.LBracket"};
static constexpr const AxisName nameKeyBackslash{"Key.Backslash"};
static constexpr const AxisName nameKeyRBracket{"Key.RBracket"};
static constexpr const AxisName nameKeyGraveAccent{"Key.GraveAccent"};
static constexpr const AxisName nameKeyWorld1{"Key.World1"};
static constexpr const AxisName nameKeyWorld2{"Key.World2"};
static constexpr const AxisName nameKeyEscape{"Key.Escape"};
static constexpr const AxisName nameKeyEnter{"Key.Enter"};
static constexpr const AxisName nameKeyTab{"Key.Tab"};
static constexpr const AxisName nameKeyBackspace{"Key.Backspace"};
static constexpr const AxisName nameKeyInsert{"Key.Insert"};
static constexpr const AxisName nameKeyDelete{"Key.Delete"};
static constexpr const AxisName nameKeyRight{"Key.Right"};
static constexpr const AxisName nameKeyLeft{"Key.Left"};
static constexpr const AxisName nameKeyDown{"Key.DA"};
static constexpr const AxisName nameKeyUp{"Key.Up"};
static constexpr const AxisName nameKeyPageUp{"Key.PageUp"};
static constexpr const AxisName nameKeyPageDown{"Key.PageDown"};
static constexpr const AxisName nameKeyHome{"Key.Home"};
static constexpr const AxisName nameKeyEnd{"Key.End"};
static constexpr const AxisName nameKeyCapsLock{"Key.CapsLock"};
static constexpr const AxisName nameKeyScrollLock{"Key.ScrollLock"};
static constexpr const AxisName nameKeyNumLock{"Key.NumLock"};
static constexpr const AxisName nameKeyPrintScreen{"Key.PrintScreen"};
static constexpr const AxisName nameKeyPause{"Key.Pause"};
static constexpr const AxisName nameKeyF1{"Key.F1"};
static constexpr const AxisName nameKeyF2{"Key.F2"};
static constexpr const AxisName nameKeyF3{"Key.F3"};
static constexpr const AxisName nameKeyF4{"Key.F4"};
static constexpr const AxisName nameKeyF5{"Key.F5"};
static constexpr const AxisName nameKeyF6{"Key.F6"};
static constexpr const AxisName nameKeyF7{"Key.F7"};
static constexpr const AxisName nameKeyF8{"Key.F8"};
static constexpr const AxisName nameKeyF9{"Key.F9"};
static constexpr const AxisName nameKeyF10{"Key.F10"};
static constexpr const AxisName nameKeyF11{"Key.F11"};
static constexpr const AxisName nameKeyF12{"Key.F12"};
static constexpr const AxisName nameKeyF13{"Key.F13"};
static constexpr const AxisName nameKeyF14{"Key.F14"};
static constexpr const AxisName nameKeyF15{"Key.F15"};
static constexpr const AxisName nameKeyF16{"Key.F16"};
static constexpr const AxisName nameKeyF17{"Key.F17"};
static constexpr const AxisName nameKeyF18{"Key.F18"};
static constexpr const AxisName nameKeyF19{"Key.F19"};
static constexpr const AxisName nameKeyF20{"Key.F20"};
static constexpr const AxisName nameKeyF21{"Key.F21"};
static constexpr const AxisName nameKeyF22{"Key.F22"};
static constexpr const AxisName nameKeyF23{"Key.F23"};
static constexpr const AxisName nameKeyF24{"Key.F24"};
static constexpr const AxisName nameKeyF25{"Key.F25"};
static constexpr const AxisName nameKeyKp0{"Key.Kp0"};
static constexpr const AxisName nameKeyKp1{"Key.Kp1"};
static constexpr const AxisName nameKeyKp2{"Key.Kp2"};
static constexpr const AxisName nameKeyKp3{"Key.Kp3"};
static constexpr const AxisName nameKeyKp4{"Key.Kp4"};
static constexpr const AxisName nameKeyKp5{"Key.Kp5"};
static constexpr const AxisName nameKeyKp6{"Key.Kp6"};
static constexpr const AxisName nameKeyKp7{"Key.Kp7"};
static constexpr const AxisName nameKeyKp8{"Key.Kp8"};
static constexpr const AxisName nameKeyKp9{"Key.Kp9"};
static constexpr const AxisName nameKeyKpDecimal{"Key.KpDecimal"};
static constexpr const AxisName nameKeyKpDivide{"Key.KpDivide"};
static constexpr const AxisName nameKeyKpMultiply{"Key.KpMultiply"};
static constexpr const AxisName nameKeyKpSubtract{"Key.KpSubtract"};
static constexpr const AxisName nameKeyKpAdd{"Key.KpAdd"};
static constexpr const AxisName nameKeyKpEnter{"Key.KpEnter"};
static constexpr const AxisName nameKeyKpEqual{"Key.KpEqual"};
static constexpr const AxisName nameKeyLShift{"Key.LShift"};
static constexpr const AxisName nameKeyLControl{"Key.LControl"};
static constexpr const AxisName nameKeyLAlt{"Key.LAlt"};
static constexpr const AxisName nameKeyLSuper{"Key.LSuper"};
static constexpr const AxisName nameKeyRShift{"Key.RShift"};
static constexpr const AxisName nameKeyRControl{"Key.RControl"};
static constexpr const AxisName nameKeyRAlt{"Key.RAlt"};
static constexpr const AxisName nameKeyRSuper{"Key.RSuper"};
static constexpr const AxisName nameKeyMenu{"Key.Menu"};

static constexpr const AxisName nameMouse1{"Mouse.1"};
static constexpr const AxisName nameMouse2{"Mouse.2"};
static constexpr const AxisName nameMouse3{"Mouse.3"};
static constexpr const AxisName nameMouse4{"Mouse.4"};
static constexpr const AxisName nameMouse5{"Mouse.5"};
static constexpr const AxisName nameMouse6{"Mouse.6"};
static constexpr const AxisName nameMouse7{"Mouse.7"};
static constexpr const AxisName nameMouse8{"Mouse.8"};

static constexpr const AxisName nameMouseX{"Mouse.X"}; // [-1..1]
static constexpr const AxisName nameMouseY{"Mouse.Y"};
static constexpr const AxisName nameMouseAbsX{"Mouse.X.abs"}; // Absolute (in pixels), can be negative
static constexpr const AxisName nameMouseAbsY{"Mouse.Y.abs"};
static constexpr const AxisName nameMouseDX{"Mouse.dX"}; // Delta from last frame, [-2..2]
static constexpr const AxisName nameMouseDY{"Mouse.dY"};
static constexpr const AxisName nameMouseDXAbs{"Mouse.dX.abs"}; // Delta from last frame, absolute (in pixels)
static constexpr const AxisName nameMouseDYAbs{"Mouse.dY.abs"};
static constexpr const AxisName nameMouseScrollX{"Mouse.ScrollX"};
static constexpr const AxisName nameMouseScrollY{"Mouse.ScrollY"};


void updateGLFWAxisMap(GLFWwindow* window, AxisMap& axisMap,
                       double mouseScrollX, double mouseScrollY)
{
    // --- Update key axes ---
    // --- Key axes will be 0.0 if key released, 1.0 if key pressed ---
    axisMap[nameKeySpace] = Axis(glfwGetKey(window, GLFW_KEY_SPACE) == GLFW_PRESS);
    axisMap[nameKeyApostrophe] = Axis(glfwGetKey(window, GLFW_KEY_APOSTROPHE) == GLFW_PRESS);
    axisMap[nameKeyComma] = Axis(glfwGetKey(window, GLFW_KEY_COMMA) == GLFW_PRESS);
    axisMap[nameKeyMinus] = Axis(glfwGetKey(window, GLFW_KEY_MINUS) == GLFW_PRESS);
    axisMap[nameKeyPeriod] = Axis(glfwGetKey(window, GLFW_KEY_PERIOD) == GLFW_PRESS);
    axisMap[nameKeySlash] = Axis(glfwGetKey(window, GLFW_KEY_SLASH) == GLFW_PRESS);
    axisMap[nameKey0] = Axis(glfwGetKey(window, GLFW_KEY_0) == GLFW_PRESS);
    axisMap[nameKey1] = Axis(glfwGetKey(window, GLFW_KEY_1) == GLFW_PRESS);
    axisMap[nameKey2] = Axis(glfwGetKey(window, GLFW_KEY_2) == GLFW_PRESS);
    axisMap[nameKey3] = Axis(glfwGetKey(window, GLFW_KEY_3) == GLFW_PRESS);
    axisMap[nameKey4] = Axis(glfwGetKey(window, GLFW_KEY_4) == GLFW_PRESS);
    axisMap[nameKey5] = Axis(glfwGetKey(window, GLFW_KEY_5) == GLFW_PRESS);
    axisMap[nameKey6] = Axis(glfwGetKey(window, GLFW_KEY_6) == GLFW_PRESS);
    axisMap[nameKey7] = Axis(glfwGetKey(window, GLFW_KEY_7) == GLFW_PRESS);
    axisMap[nameKey8] = Axis(glfwGetKey(window, GLFW_KEY_8) == GLFW_PRESS);
    axisMap[nameKey9] = Axis(glfwGetKey(window, GLFW_KEY_9) == GLFW_PRESS);
    axisMap[nameKeySemicolon] = Axis(glfwGetKey(window, GLFW_KEY_SEMICOLON) == GLFW_PRESS);
    axisMap[nameKeyEqual] = Axis(glfwGetKey(window, GLFW_KEY_EQUAL) == GLFW_PRESS);
    axisMap[nameKeyA] = Axis(glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS);
    axisMap[nameKeyB] = Axis(glfwGetKey(window, GLFW_KEY_B) == GLFW_PRESS);
    axisMap[nameKeyC] = Axis(glfwGetKey(window, GLFW_KEY_C) == GLFW_PRESS);
    axisMap[nameKeyD] = Axis(glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS);
    axisMap[nameKeyE] = Axis(glfwGetKey(window, GLFW_KEY_E) == GLFW_PRESS);
    axisMap[nameKeyF] = Axis(glfwGetKey(window, GLFW_KEY_F) == GLFW_PRESS);
    axisMap[nameKeyG] = Axis(glfwGetKey(window, GLFW_KEY_G) == GLFW_PRESS);
    axisMap[nameKeyH] = Axis(glfwGetKey(window, GLFW_KEY_H) == GLFW_PRESS);
    axisMap[nameKeyI] = Axis(glfwGetKey(window, GLFW_KEY_I) == GLFW_PRESS);
    axisMap[nameKeyJ] = Axis(glfwGetKey(window, GLFW_KEY_J) == GLFW_PRESS);
    axisMap[nameKeyK] = Axis(glfwGetKey(window, GLFW_KEY_K) == GLFW_PRESS);
    axisMap[nameKeyL] = Axis(glfwGetKey(window, GLFW_KEY_L) == GLFW_PRESS);
    axisMap[nameKeyM] = Axis(glfwGetKey(window, GLFW_KEY_M) == GLFW_PRESS);
    axisMap[nameKeyN] = Axis(glfwGetKey(window, GLFW_KEY_N) == GLFW_PRESS);
    axisMap[nameKeyO] = Axis(glfwGetKey(window, GLFW_KEY_O) == GLFW_PRESS);
    axisMap[nameKeyP] = Axis(glfwGetKey(window, GLFW_KEY_P) == GLFW_PRESS);
    axisMap[nameKeyQ] = Axis(glfwGetKey(window, GLFW_KEY_Q) == GLFW_PRESS);
    axisMap[nameKeyR] = Axis(glfwGetKey(window, GLFW_KEY_R) == GLFW_PRESS);
    axisMap[nameKeyS] = Axis(glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS);
    axisMap[nameKeyT] = Axis(glfwGetKey(window, GLFW_KEY_T) == GLFW_PRESS);
    axisMap[nameKeyU] = Axis(glfwGetKey(window, GLFW_KEY_U) == GLFW_PRESS);
    axisMap[nameKeyV] = Axis(glfwGetKey(window, GLFW_KEY_V) == GLFW_PRESS);
    axisMap[nameKeyW] = Axis(glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS);
    axisMap[nameKeyX] = Axis(glfwGetKey(window, GLFW_KEY_X) == GLFW_PRESS);
    axisMap[nameKeyY] = Axis(glfwGetKey(window, GLFW_KEY_Y) == GLFW_PRESS);
    axisMap[nameKeyZ] = Axis(glfwGetKey(window, GLFW_KEY_Z) == GLFW_PRESS);
    axisMap[nameKeyLBracket] = Axis(glfwGetKey(window, GLFW_KEY_LEFT_BRACKET) == GLFW_PRESS);
    axisMap[nameKeyBackslash] = Axis(glfwGetKey(window, GLFW_KEY_BACKSLASH) == GLFW_PRESS);
    axisMap[nameKeyRBracket] = Axis(glfwGetKey(window, GLFW_KEY_RIGHT_BRACKET) == GLFW_PRESS);
    axisMap[nameKeyGraveAccent] = Axis(glfwGetKey(window, GLFW_KEY_GRAVE_ACCENT) == GLFW_PRESS);
    axisMap[nameKeyWorld1] = Axis(glfwGetKey(window, GLFW_KEY_WORLD_1) == GLFW_PRESS);
    axisMap[nameKeyWorld2] = Axis(glfwGetKey(window, GLFW_KEY_WORLD_2) == GLFW_PRESS);
    axisMap[nameKeyEscape] = Axis(glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS);
    axisMap[nameKeyEnter] = Axis(glfwGetKey(window, GLFW_KEY_ENTER) == GLFW_PRESS);
    axisMap[nameKeyTab] = Axis(glfwGetKey(window, GLFW_KEY_TAB) == GLFW_PRESS);
    axisMap[nameKeyBackspace] = Axis(glfwGetKey(window, GLFW_KEY_BACKSPACE) == GLFW_PRESS);
    axisMap[nameKeyInsert] = Axis(glfwGetKey(window, GLFW_KEY_INSERT) == GLFW_PRESS);
    axisMap[nameKeyDelete] = Axis(glfwGetKey(window, GLFW_KEY_DELETE) == GLFW_PRESS);
    axisMap[nameKeyRight] = Axis(glfwGetKey(window, GLFW_KEY_RIGHT) == GLFW_PRESS);
    axisMap[nameKeyLeft] = Axis(glfwGetKey(window, GLFW_KEY_LEFT) == GLFW_PRESS);
    axisMap[nameKeyDown] = Axis(glfwGetKey(window, GLFW_KEY_DOWN) == GLFW_PRESS);
    axisMap[nameKeyUp] = Axis(glfwGetKey(window, GLFW_KEY_UP) == GLFW_PRESS);
    axisMap[nameKeyPageUp] = Axis(glfwGetKey(window, GLFW_KEY_PAGE_UP) == GLFW_PRESS);
    axisMap[nameKeyPageDown] = Axis(glfwGetKey(window, GLFW_KEY_PAGE_DOWN) == GLFW_PRESS);
    axisMap[nameKeyHome] = Axis(glfwGetKey(window, GLFW_KEY_HOME) == GLFW_PRESS);
    axisMap[nameKeyEnd] = Axis(glfwGetKey(window, GLFW_KEY_END) == GLFW_PRESS);
    axisMap[nameKeyCapsLock] = Axis(glfwGetKey(window, GLFW_KEY_CAPS_LOCK) == GLFW_PRESS);
    axisMap[nameKeyScrollLock] = Axis(glfwGetKey(window, GLFW_KEY_SCROLL_LOCK) == GLFW_PRESS);
    axisMap[nameKeyNumLock] = Axis(glfwGetKey(window, GLFW_KEY_NUM_LOCK) == GLFW_PRESS);
    axisMap[nameKeyPrintScreen] = Axis(glfwGetKey(window, GLFW_KEY_PRINT_SCREEN) == GLFW_PRESS);
    axisMap[nameKeyPause] = Axis(glfwGetKey(window, GLFW_KEY_PAUSE) == GLFW_PRESS);
    axisMap[nameKeyF1] = Axis(glfwGetKey(window, GLFW_KEY_F1) == GLFW_PRESS);
    axisMap[nameKeyF2] = Axis(glfwGetKey(window, GLFW_KEY_F2) == GLFW_PRESS);
    axisMap[nameKeyF3] = Axis(glfwGetKey(window, GLFW_KEY_F3) == GLFW_PRESS);
    axisMap[nameKeyF4] = Axis(glfwGetKey(window, GLFW_KEY_F4) == GLFW_PRESS);
    axisMap[nameKeyF5] = Axis(glfwGetKey(window, GLFW_KEY_F5) == GLFW_PRESS);
    axisMap[nameKeyF6] = Axis(glfwGetKey(window, GLFW_KEY_F6) == GLFW_PRESS);
    axisMap[nameKeyF7] = Axis(glfwGetKey(window, GLFW_KEY_F7) == GLFW_PRESS);
    axisMap[nameKeyF8] = Axis(glfwGetKey(window, GLFW_KEY_F8) == GLFW_PRESS);
    axisMap[nameKeyF9] = Axis(glfwGetKey(window, GLFW_KEY_F9) == GLFW_PRESS);
    axisMap[nameKeyF10] = Axis(glfwGetKey(window, GLFW_KEY_F10) == GLFW_PRESS);
    axisMap[nameKeyF11] = Axis(glfwGetKey(window, GLFW_KEY_F11) == GLFW_PRESS);
    axisMap[nameKeyF12] = Axis(glfwGetKey(window, GLFW_KEY_F12) == GLFW_PRESS);
    axisMap[nameKeyF13] = Axis(glfwGetKey(window, GLFW_KEY_F13) == GLFW_PRESS);
    axisMap[nameKeyF14] = Axis(glfwGetKey(window, GLFW_KEY_F14) == GLFW_PRESS);
    axisMap[nameKeyF15] = Axis(glfwGetKey(window, GLFW_KEY_F15) == GLFW_PRESS);
    axisMap[nameKeyF16] = Axis(glfwGetKey(window, GLFW_KEY_F16) == GLFW_PRESS);
    axisMap[nameKeyF17] = Axis(glfwGetKey(window, GLFW_KEY_F17) == GLFW_PRESS);
    axisMap[nameKeyF18] = Axis(glfwGetKey(window, GLFW_KEY_F18) == GLFW_PRESS);
    axisMap[nameKeyF19] = Axis(glfwGetKey(window, GLFW_KEY_F19) == GLFW_PRESS);
    axisMap[nameKeyF20] = Axis(glfwGetKey(window, GLFW_KEY_F20) == GLFW_PRESS);
    axisMap[nameKeyF21] = Axis(glfwGetKey(window, GLFW_KEY_F21) == GLFW_PRESS);
    axisMap[nameKeyF22] = Axis(glfwGetKey(window, GLFW_KEY_F22) == GLFW_PRESS);
    axisMap[nameKeyF23] = Axis(glfwGetKey(window, GLFW_KEY_F23) == GLFW_PRESS);
    axisMap[nameKeyF24] = Axis(glfwGetKey(window, GLFW_KEY_F24) == GLFW_PRESS);
    axisMap[nameKeyF25] = Axis(glfwGetKey(window, GLFW_KEY_F25) == GLFW_PRESS);
    axisMap[nameKeyKp0] = Axis(glfwGetKey(window, GLFW_KEY_KP_0) == GLFW_PRESS);
    axisMap[nameKeyKp1] = Axis(glfwGetKey(window, GLFW_KEY_KP_1) == GLFW_PRESS);
    axisMap[nameKeyKp2] = Axis(glfwGetKey(window, GLFW_KEY_KP_2) == GLFW_PRESS);
    axisMap[nameKeyKp3] = Axis(glfwGetKey(window, GLFW_KEY_KP_3) == GLFW_PRESS);
    axisMap[nameKeyKp4] = Axis(glfwGetKey(window, GLFW_KEY_KP_4) == GLFW_PRESS);
    axisMap[nameKeyKp5] = Axis(glfwGetKey(window, GLFW_KEY_KP_5) == GLFW_PRESS);
    axisMap[nameKeyKp6] = Axis(glfwGetKey(window, GLFW_KEY_KP_6) == GLFW_PRESS);
    axisMap[nameKeyKp7] = Axis(glfwGetKey(window, GLFW_KEY_KP_7) == GLFW_PRESS);
    axisMap[nameKeyKp8] = Axis(glfwGetKey(window, GLFW_KEY_KP_8) == GLFW_PRESS);
    axisMap[nameKeyKp9] = Axis(glfwGetKey(window, GLFW_KEY_KP_9) == GLFW_PRESS);
    axisMap[nameKeyKpDecimal] = Axis(glfwGetKey(window, GLFW_KEY_KP_DECIMAL) == GLFW_PRESS);
    axisMap[nameKeyKpDivide] = Axis(glfwGetKey(window, GLFW_KEY_KP_DIVIDE) == GLFW_PRESS);
    axisMap[nameKeyKpMultiply] = Axis(glfwGetKey(window, GLFW_KEY_KP_MULTIPLY) == GLFW_PRESS);
    axisMap[nameKeyKpSubtract] = Axis(glfwGetKey(window, GLFW_KEY_KP_SUBTRACT) == GLFW_PRESS);
    axisMap[nameKeyKpAdd] = Axis(glfwGetKey(window, GLFW_KEY_KP_ADD) == GLFW_PRESS);
    axisMap[nameKeyKpEnter] = Axis(glfwGetKey(window, GLFW_KEY_KP_ENTER) == GLFW_PRESS);
    axisMap[nameKeyKpEqual] = Axis(glfwGetKey(window, GLFW_KEY_KP_EQUAL) == GLFW_PRESS);
    axisMap[nameKeyLShift] = Axis(glfwGetKey(window, GLFW_KEY_LEFT_SHIFT) == GLFW_PRESS);
    axisMap[nameKeyLControl] = Axis(glfwGetKey(window, GLFW_KEY_LEFT_CONTROL) == GLFW_PRESS);
    axisMap[nameKeyLAlt] = Axis(glfwGetKey(window, GLFW_KEY_LEFT_ALT) == GLFW_PRESS);
    axisMap[nameKeyLSuper] = Axis(glfwGetKey(window, GLFW_KEY_LEFT_SUPER) == GLFW_PRESS);
    axisMap[nameKeyRShift] = Axis(glfwGetKey(window, GLFW_KEY_RIGHT_SHIFT) == GLFW_PRESS);
    axisMap[nameKeyRControl] = Axis(glfwGetKey(window, GLFW_KEY_RIGHT_CONTROL) == GLFW_PRESS);
    axisMap[nameKeyRAlt] = Axis(glfwGetKey(window, GLFW_KEY_RIGHT_ALT) == GLFW_PRESS);
    axisMap[nameKeyRSuper] = Axis(glfwGetKey(window, GLFW_KEY_RIGHT_SUPER) == GLFW_PRESS);
    axisMap[nameKeyMenu] = Axis(glfwGetKey(window, GLFW_KEY_MENU) == GLFW_PRESS);

    // --- Update mouse axes ---
    // --- Mouse button axes will be 0.0 if button released, 1.0 if button pressed ---
    // --- Mouse axes will be unbounded pixel coordinates ---
    // --- Mouse scroll axes will be unbounded scroll speeds ---
    axisMap[nameMouse1] = Axis(glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_1) == GLFW_PRESS);
    axisMap[nameMouse2] = Axis(glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_2) == GLFW_PRESS);
    axisMap[nameMouse3] = Axis(glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_3) == GLFW_PRESS);
    axisMap[nameMouse4] = Axis(glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_4) == GLFW_PRESS);
    axisMap[nameMouse5] = Axis(glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_5) == GLFW_PRESS);
    axisMap[nameMouse6] = Axis(glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_6) == GLFW_PRESS);
    axisMap[nameMouse7] = Axis(glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_7) == GLFW_PRESS);
    axisMap[nameMouse8] = Axis(glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_8) == GLFW_PRESS);

    {
        // Mouse axes

        double curX, curY;
        glfwGetCursorPos(window, &curX, &curY);

        // Absolute X and dX
        Axis& absX = axisMap[nameMouseAbsX];
        axisMap[nameMouseDXAbs] = curX - absX;
        absX = curX;

        // Absolute Y and dY
        Axis& absY = axisMap[nameMouseAbsY];
        axisMap[nameMouseDYAbs] = curY - absY;
        absY = curY;

        // NOTE GLFW reports cursor position relative to the client area ("framebuffer")'s
        //      top left corner
        int fbWidth, fbHeight;
        glfwGetFramebufferSize(window, &fbWidth, &fbHeight);

        float halfFbWidth = float(fbWidth) * 0.5f;
        float halfFbHeight = float(fbHeight) * 0.5f;
        float curXScaled = (float(curX) - halfFbWidth) / halfFbWidth;
        float curYScaled = (float(curY) - halfFbHeight) / halfFbHeight;

        // Mouse X rescaled to [-1..1], dX rescaled to [-2..2]
        Axis& scaledX = axisMap[nameMouseX];
        axisMap[nameMouseDX] = curXScaled - scaledX;
        scaledX = curXScaled;

        // Mouse Y rescaled to [-1..1], dY rescaled to [-2..2]
        Axis& scaledY = axisMap[nameMouseY];
        axisMap[nameMouseDY] = curYScaled - scaledY;
        scaledY = curYScaled;
    }

    // --- Update joystick axes ---
    // --- Joystick button axes will be 0.0 if button released, 1.0 if button pressed ---
    // --- Joystick axes will be -1.0 to 1.0 ---
    // TODO IMPLEMENT Query joystick count and have different per-joystick axes; right now only joystick 1 is polled
    {
        char nameStr[] = "Joy.Axis\0\0\0\0\0\0";

        int joyAxisCount = 0;
        const float* joyAxes = glfwGetJoystickAxes(GLFW_JOYSTICK_1, &joyAxisCount);
        if(!joyAxes)
        {
            // Joystick disconnected, nothing left to do
            return;
        }
        // Else: copy state of each axis
        for(int i = 0; i < joyAxisCount; i ++)
        {
            snprintf(nameStr, sizeof(nameStr) - 1, "Joy.Axis%d", i);
            nameStr[sizeof(nameStr) - 1] = '\0'; // (just to make sure the name is null-terminated)
            axisMap[nameStr] = joyAxes[i]; // (-1.0 to 1.0)
        }

        int joyButtonCount = 0;
        const unsigned char* joyButtons = glfwGetJoystickButtons(GLFW_JOYSTICK_1, &joyButtonCount);
        if(!joyAxes)
        {
            // Joystick disconnected, nothing left to do
            return;
        }
        for(int i = 0; i < joyButtonCount; i ++)
        {
            snprintf(nameStr, sizeof(nameStr) - 1, "Joy.%d", i);
            nameStr[sizeof(nameStr) - 1] = '\0'; // (just to make sure the name is null-terminated)
            axisMap[nameStr] = Axis(joyButtons[i] == GLFW_PRESS); // (0 or 1)
        }
    }

}


}
