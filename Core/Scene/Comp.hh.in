#pragma once

// ===== AUTOGENERATED, DO NOT EDIT! ALL CHANGES WILL BE LOST ==================
// {{comps|length}} comp[s] in this header file
// #include CompMeta.hh before including this file!

namespace Ares
{

{%for comp in comps %}

/// {{comp.descr}}
struct {{comp.name}}Comp
{
    {% for field in comp.fields %}
    {{field.type}} {{field.name}}; ///< {{field.descr}}
    {% endfor %}
};

template <>
struct CompMetaGetter<{{comp.name}}Comp>
{
    inline static const CompMeta& get()
    {
        static const CompMeta meta =
        {
            .name = "{{comp.name}}",
            .descr = "{{comp.descr}}",
            .fields =
            {
                {% for field in comp.fields %}
                { "{{field.name}}", "{{field.type}}", "{{field.descr}}" },
                {% endfor %}
            },
            .nFields = {{comp.fields|length}},
        };
        return meta;
    }
};

template <>
struct Serializer<{{comp.name}}Comp>
{
    inline static bool serialize(const {{comp.name}}Comp& value, std::ostream& stream)
    {
        {% for field in comp.fields %}
        Serializer<{{field.type}}>::serialize(value.{{field.name}}, stream);
        {% endfor %}
        return bool(stream);
    }

    inline static bool deserialize({{comp.name}}Comp& value, std::istream& stream)
    {
        {% for field in comp.fields %}
        Serializer<{{field.type}}>::deserialize(value.{{field.name}}, stream);
        {% endfor %}
        return bool(stream);
    }
};

{% endfor %}

}
